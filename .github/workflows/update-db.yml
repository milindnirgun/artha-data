name: Update artha database with data from the datafiles for a given date

# Controls when the action will run.
on:
  schedule:
    # Run at midnight UTC (4 pm PDT) Mon thru Fri
    - cron: "30 22 * * 1-5"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-db:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
      # set the current date in environment to be used for appending to filenames in subsequent steps
      - name: current-date
        #run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Setup caching of the virtual environment directory
      - name: Cache virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }} # Unique key for the cache
          restore-keys: |
            ${{ runner.os }}-venv-
            ${{ runner.os }}-

      # Create a virtual environment and activate it
      - name: Create and activate virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true' # only install if cache miss
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "PATH=${GITHUB_WORKSPACE}/.venv/bin:$PATH" >> $GITHUB_ENV

      # Install dependencies in the virtual environment, if cache miss
      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          .venv/bin/pip install -r requirements.txt

      # Run database update script
      - name: execute-db-update
        run: |
          source .venv/bin/activate
          ${GITHUB_WORKSPACE}/scripts/update_db.sh ${{ env.DATE }}

      # Commit database changes
      - name: commit-changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "updated database with new data as of ${{ env.DATE }}"
          git push


